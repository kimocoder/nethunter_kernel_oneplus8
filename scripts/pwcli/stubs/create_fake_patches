#!/usr/bin/env python3
#
# Copyright (c) 2016, The Linux Foundation.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import string
import os.path
import re
import email

template_patch = '''Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Subject: [$INDEX/$INDEX_MAX] $TITLE $INDEX
From: Dino Dinosaurus <dino@example.com>
Message-Id: <11111@example.com>
To: list@example.com
Date: 2011-02-11 15:23:31
X-Patchwork-Id: $ID
X-Submitter-Id: 7477
X-Project: Linux Wireless Mailing List
X-Project-Id: 15
X-Commit-Ref: 
X-State: $STATE
X-State-Id: $STATE_ID
X-Delegate: test
X-Delegate-Id: 25621


Foo commit log. Ignore this text

Signed-off-by: Dino Dinosaurus <dino@example.com>

---
FIXME: add the patch here
'''

def main():
      # for the help and possible future additions
      parser = argparse.ArgumentParser(description='create fake patches for patchwork stub. Note: state is hardcoded, you need to manually change that!')
      parser.add_argument('start_id', type=int, nargs=1,
                          help='The id of the first patch')
      parser.add_argument('count', type=int, nargs=1,
                          help='How many patches to create')
      parser.add_argument('title', type=str, nargs=1,
                          help='Title of patches')

      args = parser.parse_args()

      outputdir = os.path.join('data', 'patches')
      filenames = []

      for index in range(1, args.count[0] + 1):
            t = string.Template(template_patch)
            patchwork_id = args.start_id[0] + index - 1

            # FIXME: the state is hardcoded for now
            state = 'New'
            state_id = '1'

            patch = t.substitute(INDEX=index, INDEX_MAX=args.count[0],
                                 TITLE=args.title[0], ID=patchwork_id,
                                 STATE=state, STATE_ID=state_id)

            # make the title suitable for a filename
            title = email.message_from_string(patch)['Subject']
            title = title.lower()

            # remove tags (from Patch.clean_subject()
            title = re.sub(r'^\s*(\[.*?\]\s*)*', '', title)

            title = re.sub(r'\W+', '-', title)

            # FIXME: there should be a proper mapping, for example
            # 'Under Review' -> 'review'
            state = state.lower()

            filename = '%s-%s-%s.patch' % (patchwork_id, state, title)
            f = open(os.path.join(outputdir, filename), 'w')
            f.write(patch)
            f.close

            filenames.append(filename)

      
      print('%d patches wrote to %s:' % (len(filenames), outputdir))

      for filename in filenames:
            print(filename)

if __name__ == "__main__":
      main()
