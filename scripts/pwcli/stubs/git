#!/usr/bin/env python3
#
# Copyright (c) 2015, The Linux Foundation.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import sys
import os
import os.path
import stubslib

gitdir = None
gitrepo = None

# stub repository directory layout, location defined in
# STUB_GIT_DATADIR:
#
# objects/commits - list of commits, head commit last
# objects/<commitid> - commit object, patch in ascii format
# branches - list of branches, same as output from git-branch
# config - config file, almost same format as in real git but using ConfigParser

def cmd_branch(args):
      print('\n'.join(gitrepo.get_branches()))

def cmd_am_conflict(args):
      conflict_msg = '''Applying: foo: conflict patch
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging foo/bar.c
CONFLICT (content): Merge conflict in drivers/net/wireless/ath/foo/core.h
Failed to merge in the changes.
Patch failed at 0001 foo: conflict patch
When you have resolved this problem run "git am --resolved".
If you would prefer to skip this patch, instead run "git am --skip".
To restore the original branch and stop patching run "git am --abort".'''

      # git 1.7.9.5 prints the whole message to stdout and nothing to stderr
      sys.stdout.write(conflict_msg)

      sys.exit(1)

def cmd_am(args):
      if not args.s:
            # -s switch not used, exit
            sys.exit(0)

      if gitrepo.need_commit_failure():
            cmd_am_conflict(args)
      
      gitrepo.add_commit(sys.stdin.read())

def cmd_config(args):
      if not args.get:
            # for now we only support --get
            sys.exit(1)

      names = args.get[0].split('.')
      section = names[0]
      name = names[1]

      try:
            print(gitrepo.get_config(section, name))
      except ValueError:
            print('%s not found' % (name))
            sys.exit(1)

def cmd_log(args):
      # FIXME: only support --oneline and --max-count for now

      if len(args.max_count) > 0:
            max_count = int(args.max_count[0])
            print(gitrepo.get_commits_oneline(max_count))

def cmd_show(args):
      # FIXME: only support HEAD for now
      if args.commitid != 'HEAD':
            print('Unsupported commit id: %s' % (args.commitid))
            return

      if args.format is not None:
            # print using simple customised format
            commit = gitrepo.get_commits()[-1]
            print('commit %s' % (commit.id))
            print(commit.subject)
            print()
            print('TODO: add printing of commit log here, the parsin is just missing')
      else:
            # print using the default git show format
            print('commit %s' % (gitrepo.get_commits()[-1].id))

            # TODO: print rest of the commit, there's an ugly
            # workaround in GitCommit.parse() due to missing output
            # here

def cmd_cherry_pick(args):
      try:
            gitrepo.cherry_pick(args.commit_id)
      except ValueError:
            print('Commit id %s not found.' % (args.commit_id))

def cmd_checkout(args):
      # FIXME: just a dummy command for now
      # gitrepo.change_branch(args.branch)
      pass

def cmd_filter_branch(args):
      # FIXME: just a dummy command for now
      pass

def cmd_reset(args):
      if not args.hard:
            print('Only --reset switch is supported')
            sys.exit(1)

      if args.commit != 'HEAD^':
            print('Only HEAD^ commit is supported')
            sys.exit(1)

      gitrepo.delete_top_commit()

def main():
      global gitdir
      global gitrepo

      if 'STUB_GIT_DATADIR' in os.environ:
            gitdir = os.environ['STUB_GIT_DATADIR']
      else:
            gitdir = '.'

      gitrepo = stubslib.GitRepository.load(gitdir)

      parser = argparse.ArgumentParser(description='git-stub', prog='',
                                       add_help=False)

      parser.add_argument('--version', action='store_true')

      subparsers = parser.add_subparsers()
      subparsers.add_parser('branch').set_defaults(func=cmd_branch)

      parser_am = subparsers.add_parser('am')
      parser_am.add_argument('-s', action='store_true')
      parser_am.add_argument('-3', action='store_true')
      parser_am.set_defaults(func=cmd_am)

      parser_config = subparsers.add_parser('config')
      parser_config.add_argument('--get', nargs=1, action='store')
      parser_config.set_defaults(func=cmd_config)

      parser_log = subparsers.add_parser('log')
      parser_log.add_argument('--oneline', action='store_true')
      parser_log.add_argument('--reverse', action='store_true')
      parser_log.add_argument('--max-count', nargs=1, action='store')
      parser_log.add_argument('--no-decorate', action='store_true')
      parser_log.set_defaults(func=cmd_log)

      parser_show = subparsers.add_parser('show')
      parser_show.add_argument('--format', nargs=1)
      parser_show.add_argument('--no-patch', action='store_true')
      parser_show.add_argument('commitid')
      parser_show.set_defaults(func=cmd_show)

      parser_cherry_pick = subparsers.add_parser('cherry-pick')
      parser_cherry_pick.add_argument('commit_id')
      parser_cherry_pick.set_defaults(func=cmd_cherry_pick)

      parser_checkout = subparsers.add_parser('checkout')
      parser_checkout.add_argument('branch')
      parser_checkout.set_defaults(func=cmd_checkout)

      parser_filter_branch = subparsers.add_parser('filter-branch')
      parser_filter_branch.add_argument('--force', action='store_true')
      parser_filter_branch.add_argument('--msg-filter', nargs=2)
      parser_filter_branch.set_defaults(func=cmd_filter_branch)

      parser_reset_branch = subparsers.add_parser('reset')
      parser_reset_branch.add_argument('--hard', action='store_true')
      parser_reset_branch.add_argument('commit')
      parser_reset_branch.set_defaults(func=cmd_reset)

      args = parser.parse_args()

      if args.version:
            # Print a version string so that test scripts can verify
            # that this really is a stub and not playing with a real
            # git repo.
            #
            # Note: have to be called with 'git --version branch' as I
            # didn't know how to implement 'git --version' with
            # argparse
            print('stub-git')
            print('STUB_GIT_DATADIR=%s' % gitdir)
            sys.exit(0)

      args.func(args)

if __name__ == "__main__":
      main()
